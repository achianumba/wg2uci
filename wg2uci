#!/bin/sh

INI_FILEPATH=$1
INI_FILENAME="$(basename "$INI_FILEPATH")"

ZONE='wan'
ZONE_INDEX=1
ZONE_INPUT='ACCEPT'
ZONE_FORWARD='ACCEPT'
ZONE_OUTPUT='ACCEPT'
ZONE_MASQ=0
ZONE_SET='uci set firewall.@zone[-1]'

ARGS="$(getopt -o "z:i:f:o:m" -l "zone:,zone-input:,zone-forward:,zone-output:,zone-masq" -n "$0" -- "$@")"

# Prevent 'unbound variable' error
eval set -- "$ARGS"

while true; do
  case "$1" in
    -z | --zone)
      ZONE="$2"
      shift 2
      continue
      ;;
    
    -i | --zone-input)
      ZONE_INPUT="$2"
      shift 2
      continue
      ;;
    
    -f | --zone-forward)
      ZONE_FORWARD="$2"
      shift 2
      continue
      ;;
    
    -o | --zone-output)
      ZONE_OUTPUT="$2"
      shift 2
      continue
      ;;
    
    -m | --zone-masq)
      ZONE_MASQ=1
      shift
      continue
      ;;
    
    *)
      break
      ;;
  esac
done

SCRIPT=$(cat << SCRIPT
#!/bin/sh

# Copyright 2024 Arinze Chianumba
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# -
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##

SCRIPT
)

CURRENT_SECTION=''
PEER_DESCRIPTION=''
INTERFACE_NAME=''
PEER_REF=''
PEER_INDEX=0
PEER_COUNT="$(grep -cE '^\[Peer\]$' "$INI_FILEPATH")"

while IFS='=' read -r key value || [ -n "$key" ]; do
  # Strip whitespace
  key=$(echo "$key" | tr -d '[:space:]')
  value=$(echo "$value" | tr -d '[:space:]')
  
  # Skip empty lines
  [ -z "$key" ] && continue

  # Set interface name & update section headers
  case $key in
    \#InterfaceName)
      INTERFACE_NAME="$value"
      continue
      ;;

    \[Interface\])
      CURRENT_SECTION='Interface'

      if [ -n "$INTERFACE_NAME" ]; then
        SCRIPT="$SCRIPT\necho 'Configuring $INTERFACE_NAME interface...'\nuci -q delete network.$INTERFACE_NAME\nuci set network.$INTERFACE_NAME=interface"
      else
        INTERFACE_NAME="${INI_FILENAME%.conf}"
        SCRIPT="$SCRIPT\nuci set network.$INTERFACE_NAME=interface"
      fi
      
      ZONE_NETWORK="$INTERFACE_NAME"

      SCRIPT="$SCRIPT\nuci set network.$INTERFACE_NAME.proto='wireguard'"
      
      continue
      ;;
    
    \#Description)
      PEER_DESCRIPTION="$value"
      continue
      ;;

    \[Peer\])
      # shellcheck disable=SC1087
      PEER_NAME="wireguard_$INTERFACE_NAME"
      PEER_REF="@$PEER_NAME[-1]"
      SET_PEER="uci set network.$PEER_REF"
      PEER_INDEX=$((PEER_INDEX+1))

      if [ "$CURRENT_SECTION" = "Interface" ]; then
        SCRIPT="$SCRIPT\necho 'Committing $INTERFACE_NAME WireGuard interface to the network...'\nuci commit network"
      fi

      CURRENT_SECTION='Peer'

      SCRIPT="$SCRIPT\n\necho 'Configuring peer $PEER_INDEX...'\nuci -q delete network.$PEER_NAME\nuci add network $PEER_NAME"

      SCRIPT="$SCRIPT\n$SET_PEER=$PEER_NAME\n$SET_PEER.description='$PEER_DESCRIPTION'\n$SET_PEER.route_allowed_ips='1'"
      
      continue
      ;;
  esac

  # Parse Interface fields
  if [ "$CURRENT_SECTION" = "Interface" ]; then
    case "$key" in
      PrivateKey)
        SCRIPT="$SCRIPT\nuci set network.$INTERFACE_NAME.private_key='$value='"
        continue
        ;;

      Address)
        SCRIPT="$SCRIPT\nuci add_list network.$INTERFACE_NAME.addresses='$value'"
        continue
        ;;

      DNS)
        SCRIPT="$SCRIPT\nuci set network.$INTERFACE_NAME.dns='$(echo "$value" | tr ',' ' ')'"
        continue
        ;;

      ListenPort)
        SCRIPT="$SCRIPT\nuci set network.$INTERFACE_NAME.listen_port='$value'"
        continue
        ;;
    esac
  fi

  # Parse peer sections
  if [ "$CURRENT_SECTION" = "Peer" ]; then
    case "$key" in
      PublicKey)
        SCRIPT="$SCRIPT\n$SET_PEER.public_key='$value='"
        continue
        ;;

      Endpoint)
        SCRIPT="$SCRIPT\n$SET_PEER.endpoint_host='${value%:*}'"
        SCRIPT="$SCRIPT\n$SET_PEER.endpoint_port='${value#*:}'"
        continue
        ;;

      PersistentKeepalive)
        SCRIPT="$SCRIPT\n$SET_PEER.persistent_keepalive='$value'"
        continue
        ;;
      
      AllowedIPs)
        value=$(echo "$value" | tr ',' ' ')
        
        # Convert the string to an array (using set and positional parameters)
        set -- $value
        
        for IP_SUBNET in "$@"; do
          SCRIPT="$SCRIPT\nuci add_list network.$PEER_REF.allowed_ips='$IP_SUBNET'"
        done
        ;;

      PresharedKey)
        SCRIPT="$SCRIPT\n$SET_PEER.preshared_key='$value'"
        continue
        ;;
    esac
  fi
done < "$INI_FILEPATH"

SCRIPT="$SCRIPT\n\nuci commit network\n\necho 'Adding $INTERFACE_NAME to the $ZONE zone...'"

if [ "$ZONE" = "wan" ] || [ "$ZONE" = "lan" ]; then
  [ "$ZONE" = "lan" ] && ZONE_INDEX=0

  SCRIPT="$SCRIPT\nuci del_list firewall.@zone[$ZONE_INDEX].network='$INTERFACE_NAME'\nuci add_list firewall.@zone[$ZONE_INDEX].network='$INTERFACE_NAME'\nuci commit firewall"
else
  SCRIPT="$SCRIPT\nuci add firewall zone\n$ZONE_SET.name='$ZONE'\n$ZONE_SET.input='$ZONE_INPUT'\n$ZONE_SET.forward='$ZONE_FORWARD'\n$ZONE_SET.output='$ZONE_OUTPUT'\nuci add_list firewall.@zone[-1].network='$INTERFACE_NAME'\n$ZONE_SET.masq='$ZONE_MASQ'"
fi

SCRIPT="$SCRIPT\n\n\necho Reloading the firewall...\n/etc/init.d/firewall reload\n\necho Reloading the network...\n/etc/init.d/network reload"

# Write script to file
SCRIPT_NAME="config-$INTERFACE_NAME.sh"
echo "$SCRIPT "| tee "$SCRIPT_NAME"
chmod +x "$SCRIPT_NAME"
